//best estimate of per base mu is 3e-8. Going to use 3e-6
//best median estimate of recombination is r 1.6e-08 
//n = 3e-6/3e-8 = 100
//suggested rescaling is (1/2)*(1 - (1-2*r)^100) ~ 1.6e-6


function(numeric)calc_folded(integer nsize, object<Mutation> mut_vec, object<Genome> pops, object<Genome> samples, [logical frequency = T]){

    s_len = nsize + 1;
    sfs = rep(0, s_len);
    for(i in mut_vec){
        n_count = sum(samples.containsMutations(i));
        n0_count =  s_len - n_count;

        if(n_count >= n0_count){
            sfs[n0_count] =  sfs[n0_count] + 1;
        } else{
            sfs[n_count] =  sfs[n_count] + 1;
        }

        mut_lgl = sum(pops.containsMutations(i));
        if(sum(mut_lgl) / length(mut_lgl) == 1 | sum(mut_lgl) / length(mut_lgl) == 0){
            sfs[0] = sfs[0] + 1;
        }
    }

    if(frequency){
        sfs = sfs/sum(sfs);
    }
    return sfs;
}

initialize(){
    //initializeTreeSeq(simplificationRatio=INF); //off for now.
    defineConstant("n_exons", 4);
    defineConstant("exon_size", 200);
    defineConstant("n_genes", 150);
    defineConstant("intron_size", 300);
    defineConstant("intergenic_size", 30000);

    defineConstant("Tgen", 10*Na + B_t);
    defineConstant("growth_rate", log(N0/Nb)/(B_t - 1));
    initializeMutationRate(mu);
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeMutationType("m2", 0.5, "g", sfs1_mean, sfs1_shape);
    initializeMutationType("m3", 0.5, "g", sfs2_mean, sfs2_shape);
    m1.convertToSubstitution = T;
    m3.convertToSubstitution = T;
    initializeGenomicElementType("g1", c(m1, m2, m3), c(p_neutral, p_sfs1, 1-(p_neutral + p_sfs1)));

    //buffer for genomic element ends
    bp_buff = asInteger((loci  - (intergenic_size + n_exons * exon_size + intron_size * (n_exons - 1)) * n_genes)/2);

    base = bp_buff;
    while(base < loci - bp_buff){
        for(j in 1:n_genes){
            for(i in 1:n_exons){
                initializeGenomicElement(g1, base, base+exon_size);
                base = base+exon_size+intron_size;
            }
            base = base+exon_size+intergenic_size;
        }
    }
    //initializeGenomicElement(g1, 0, loci-1);
    initializeRecombinationRate(rr);
}

1 {
    sim.addSubpop("p1", Na); 
    sim.rescheduleScriptBlock(s1, start=2, end=Tgen-B_t-1);
    sim.rescheduleScriptBlock(s2, start=Tgen-B_t, end=Tgen-1);
    sim.rescheduleScriptBlock(s3, start=Tgen, end=Tgen);
}

s1 late(){

    //print("s1");
    //print(c(growth_rate, sim.generation, p1.individualCount));
    p1.setSubpopulationSize(Nb);
}

s2 late(){

    //print("s2");
    //print(c(growth_rate, sim.generation, p1.individualCount));
    //print(sim.generation - Tgen + B_t);
    t = sim.generation - Tgen + B_t;
    p1_size = round(Nb * exp(growth_rate * t));
    p1.setSubpopulationSize(asInteger(p1_size));


}

s3 late() {

    //print(c(growth_rate, sim.generation, p1.individualCount));
    //print(calc_folded(n_size, m1_vec, allIndividuals, sampledIndividuals, frequency = F));
    //print(calc_folded(n_size, m2_vec, allIndividuals, sampledIndividuals, frequency = F));
    //sim.treeSeqOutput(tree_file);
    //sampledIndividuals.outputVCF(filePath = "test.vcf", simplifyNucleotides=F);    

    allIndividuals = sim.subpopulations.genomes;
    sampledIndividuals = sample(allIndividuals, n_size);

    m1_vec = sim.mutations[sim.mutations.mutationType == m1];
    m2_vec = sim.mutations[sim.mutations.mutationType == m2];
    m3_vec = sim.mutations[sim.mutations.mutationType == m3];

    sfs1 = calc_folded(n_size, m1_vec, allIndividuals, sampledIndividuals, frequency = F);
    sfs2 = calc_folded(n_size, m2_vec, allIndividuals, sampledIndividuals, frequency = F);
    sfs3 = calc_folded(n_size, m3_vec, allIndividuals, sampledIndividuals, frequency = F);

    header_line = paste("#Na N0 Nb B_t sfs1_shape sfs1_mean sfs2_shape sfs2_mean p_neutral p_sfs1");
    data_line = paste(c(Na, N0, Nb, B_t, sfs1_shape, abs(sfs1_mean), sfs2_shape, abs(sfs2_mean), p_neutral, p_sfs1));

    cat("\n");
    cat(header_line);
    cat("\n");
    cat(data_line);
    cat("\n");

    //cat(paste(c(n_size, "SFS:", sfs1, sfs2, sfs3, "\n")));
    //cat(paste(c(n_size, "SFS:", sfs1[0:(size(sfs1)-1)], sfs2[0:(size(sfs2)-1)], sfs3[0:(size(sfs3)-1)], "\n")));
    cat(paste(c(n_size, "SFS:", sfs1[1:(size(sfs1)-1)], sfs2[1:(size(sfs2)-1)], sfs3[1:(size(sfs3)-1)], "\n")));
    //cat(paste(c(n_size, "SFS:", sfs1[2:(size(sfs1)-1)], sfs2[2:(size(sfs2)-1)], sfs3[2:(size(sfs3)-1)], "\n")));
    //print(paste(c("sfs2:", sfs2[2:(size(sfs2)-1)])));
    //print(paste(c("sfs3:", sfs3[2:(size(sfs3)-1)])));
}


