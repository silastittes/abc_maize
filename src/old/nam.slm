function (float)alpha_x(integer sfs_0, integer sfs_4){
    sz = size(sfs_0);
    d0 = sfs_0[sz-1];
    p0 = sfs_0[0:(sz-2)];
    d4 = sfs_4[sz-1];
    p4 = sfs_4[0:(sz-2)];
    alpha = 1 - ((d4 / d0) * (p0 / p4));
    return alpha;
}

function(numeric)calc_sfs(integer n_size, object<Mutation> mut_vec, object<Genome> pops, object<Genome> samples){ 

    sfs = rep(0, n_size+1);
    fixed = 0;
    for(i in mut_vec){
        n_count = sum(samples.containsMutations(i));
        sfs[n_count] =  sfs[n_count] + 1;

        mut_lgl = sum(pops.containsMutations(i));
        if(sum(mut_lgl) / length(mut_lgl) == 1){
            fixed = fixed + 1;
        }
    }
    return c(sfs, fixed);
}

function(numeric)calc_folded(integer n_size, object<Mutation> mut_vec, object<Genome> pops, object<Genome> samples, [logical frequency = T]){ 

    s_len = n_size + 1;
    sfs = rep(0, s_len);
    for(i in mut_vec){
        n_count = sum(samples.containsMutations(i));
        n0_count =  s_len - n_count;
    
        if(n_count >= n0_count){
            sfs[n0_count] =  sfs[n0_count] + 1;
        } else{
            sfs[n_count] =  sfs[n_count] + 1;
        }

        mut_lgl = sum(pops.containsMutations(i));
        if(sum(mut_lgl) / length(mut_lgl) == 1 | sum(mut_lgl) / length(mut_lgl) == 0){
            sfs[0] = sfs[0] + 1;
        }
    }

    if(frequency){
        sfs = sfs/sum(sfs); 
    }
    return sfs;
}

function(numeric)dist(numeric sfs){

    sfs_len = length(sfs);
    dist_vec = rep(0.0, asInteger(sfs_len*(sfs_len - 1)/2));
    k = 0;
    for(i in 0:(sfs_len-1)){
        for(j in 0:(sfs_len-1)){
            if(j > i){
                dist_vec[k] = sqrt((sfs[i] - sfs[j])^2);
                k=k+1;
            }
        }
    }
    return dist_vec;
}


function(numeric)pi(numeric sfs){

    sfs_len = length(sfs);
    if(sfs_len % 2 == 0){
        unfold_len = (sfs_len - 1) * 2;
    } else { 
        unfold_len = (sfs_len - 1) * 2 - 2;
    }
    sfs_cats = 0:(sfs_len - 1);
    prod_cats = sfs_cats * (unfold_len - sfs_cats);
    print(sfs_cats);
    print(unfold_len - sfs_cats);
    pi_num = sum(prod_cats * sfs);
    return pi_num / (unfold_len*(unfold_len-1)/2);
}

function(numeric)tajD(numeric sfs, [logical var = T]){

    theta_pi = pi(sfs);

    sfs_len = length(sfs);

    if(sfs_len % 2 == 0){
        unfold_len = (sfs_len - 1) * 2;
    } else {
        unfold_len = (sfs_len - 1) * 2 -1;
    }

    n = unfold_len - 1;

    seg_sites = sum(sfs[1:(sfs_len-1)]);
    harmonic = sum(1/1:n);
    theta_w =  seg_sites/harmonic;
    print("theta_w:");
    print(theta_w);

    if(var){
        a1 = harmonic;
        a2 = sum(1/(1:n)^2);
       
        b1 = ((n+1)/(3*(n-1)));
        b2 = (2*(n^2 + n + 3))/(9*n*(n-1));
    
        c1 = b1 - (1/a1);
        c2 = b2 - ((n+2)/(a1*n)) + (a2/a1^2);
     
        e1 = c1/a1;
        e2 = c2 / (a1^2 + a2);
  
        S = seg_sites;

        v = sqrt(e1*S + e2*S*(S-1));

        return (theta_pi - theta_w)/v;

    } else {
        return (theta_pi - theta_w);
    }
}

function(numeric)sum_stats(integer n_size, object<Mutation> mut_vec, object<Genome> pops, object<Genome> samples, [logical frequency = T]){

    sfs = calc_folded(n_size, mut_vec, pops, samples, frequency);
   
    n_fold = asInteger(n_size/2);

    sfs_count = sfs[0:(n_fold)];

    print(sfs_count);

    sfs = sfs_count/sum(sfs_count);

    bins = 1:(n_fold+1);
     
    weights = sfs*bins;

    bin_dist = dist(sfs);
    
    wt_dist = dist(weights);

    bin_mean = sum(weights);

    bin_sd = sqrt(sum(weights)^2 - sum((weights)^2));  

    bin_skew = sum(weights)^3 - sum((weights)^3);
    
    bin_mean_dist = mean(bin_dist);

    wt_mean_dist = mean(wt_dist);
    
    bin_sd_dist = sd(bin_dist);

    wt_sd_dist = sd(wt_dist);

    sfs_pi = pi(sfs_count);
    sfs_pi = sfs_pi/loci;
    

    sfs_td = tajD(sfs_count);
    sfs_tdU = tajD(sfs_count, var = F);

    print("wt_dist bin_mean bin_sd bin_skew bin_mean_dist wt_mean_dist bin_sd_dist wt_sd_dist PI TD");

    return c(bin_mean, bin_sd, bin_skew, bin_mean_dist, wt_mean_dist, bin_sd_dist, wt_sd_dist, sfs_pi, sfs_td);


}



initialize(){

    defineConstant("growth_rate", log(N0/Nb)/(t_total - B_t - 1)); 
    initializeMutationRate(mu);
    initializeMutationType("m1", 0.5, "f", 0);
    initializeMutationType("m2", 0.5, "g", gamma_mean, gamma_shape);
    m1.convertToSubstitution = F;
    m2.convertToSubstitution = F;
    initializeGenomicElementType("g1", c(m1, m2), c(p_neutral, 1-p_neutral));
    initializeGenomicElement(g1, 0, loci-1);
    initializeRecombinationRate(1e-7);
}

1 {
    sim.addSubpop("p1", Na); 
    sim.rescheduleScriptBlock(s1, start=t_total, end=t_total);
}

late(){
    if(sim.generation == (B_t-1)){
        print("Bottleneck time!");
        p1.setSubpopulationSize(Nb);
   }

    if(sim.generation >= (B_t - 1)){
        t = sim.generation - B_t;
        p1_size = round(Nb * exp(growth_rate * t));
        p1.setSubpopulationSize(asInteger(p1_size));
    }

    //print(c(growth_rate, sim.generation, p1.individualCount));

}

s1 late() {

    print("POP SIZE IS:");
    print(c(growth_rate, sim.generation, p1.individualCount));

    n_size = 50;

    allIndividuals = sim.subpopulations.genomes;
    sampledIndividuals = sample(allIndividuals, n_size);

    m_vec = sim.mutations;

    print(sum_stats(n_size, m_vec, allIndividuals, sampledIndividuals, frequency = F));

    //print(pi(dtest)/loci);
    //print(tajD(dtest, var = T));

}




/*

    "OLD, IGNORE (HOPEFULLY)"
    defineConstant("loci", 200000);
    defineConstant("Na", 500); //ancestral pop size
    defineConstant("N0", 1000); //current pop size
    defineConstant("Nb", 100); //instantaneous bottleneck size
    defineConstant("B_t", 100); //instantaneous bottleneck time
    defineConstant("t_total", 1000);
    defineConstant("p_neutral", 0.5);
    defineConstant("gamma_shape", 2);
    defineConstant("gamma_mean", -1e-2);


    m1_vec = sim.mutations[sim.mutations.mutationType == m1];
    m2_vec = sim.mutations[sim.mutations.mutationType == m2];

    sfs = calc_folded(n_size, m_vec, allIndividuals, sampledIndividuals, frequency = F);
    sfs_nP = calc_folded(n_size, m1_vec, allIndividuals, sampledIndividuals, frequency = F);
    sfs_dP = calc_folded(n_size, m2_vec, allIndividuals, sampledIndividuals, frequency = F);
    

    sfs_count = sfs[0:(n_fold)];    
    sfs_n_count = sfs_nP[0:(n_fold)];    
    sfs_d_count = sfs_dP[0:(n_fold)];    

    sfs = sfs_count/sum(sfs_count);
    sfs_n = sfs_n_count/sum(sfs_n_count);
    sfs_d = sfs_d_count/sum(sfs_d_count);

    print("all");
    print(sfs_count);
    print("neutral:");
    print(sfs_n_count);
    print("selected:");
    print(sfs_d_count);

    bins = 1:(n_fold+1);
    
    sfs_diff = sfs_d - sfs_n;
    
    n_weights = sfs_n*bins;
    d_weights = sfs_d*bins;
    delta_weights = sfs_diff*bins;

    n_bin_dist = dist(sfs_n);
    d_bin_dist = dist(sfs_d);
    delta_bin_dist = dist(sfs_diff);
    
    n_wt_dist = dist(n_weights);
    d_wt_dist = dist(d_weights);
    delta_wt_dist = dist(delta_weights);

    n_bin_mean = sum(n_weights);
    d_bin_mean = sum(d_weights);
    delta_bin_mean = sum(delta_weights);

    n_bin_sd = sqrt(sum(n_weights)^2 - sum((n_weights)^2));  
    d_bin_sd = sqrt(sum(d_weights)^2 - sum((d_weights)^2));  
    delta_bin_sd =  sqrt(sum(delta_weights)^2 - sum((delta_weights)^2));

    n_bin_skew = sum(n_weights)^3 - sum((n_weights)^3);
    d_bin_skew = sum(d_weights)^3 - sum((d_weights)^3);
    delta_bin_skew = sum(delta_weights)^3 - sum((delta_weights)^3);
    
    n_bin_mean_dist = mean(n_bin_dist);
    d_bin_mean_dist = mean(d_bin_dist);
    delta_bin_mean_dist = mean(delta_bin_dist);

    n_wt_mean_dist = mean(n_wt_dist);
    d_wt_mean_dist = mean(d_wt_dist);
    delta_wt_mean_dist = mean(delta_wt_dist);
    
    n_bin_sd_dist = sd(n_bin_dist);
    d_bin_sd_dist = sd(d_bin_dist);
    delta_bin_sd_dist = sd(delta_bin_dist);

    n_wt_sd_dist = sd(n_wt_dist);
    d_wt_sd_dist = sd(d_wt_dist);
    delta_wt_sd_dist = sd(delta_wt_dist);

    print("n_wt_dist n_bin_mean n_bin_sd n_bin_skew n_bin_mean_dist n_wt_mean_dist n_bin_sd_dist n_wt_sd_dist d_wt_dist d_bin_mean d_bin_sd d_bin_skew d_bin_mean_dist d_wt_mean_dist d_bin_sd_dist d_wt_sd_dist delta_wt_dist delta_bin_mean delta_bin_sd delta_bin_skew delta_bin_mean_dist delta_wt_mean_dist delta_bin_sd_dist delta_wt_sd_dist");

    print(c(n_bin_mean, n_bin_sd, n_bin_skew, n_bin_mean_dist, n_wt_mean_dist, n_bin_sd_dist, n_wt_sd_dist, 
            d_bin_mean, d_bin_sd, d_bin_skew, d_bin_mean_dist, d_wt_mean_dist, d_bin_sd_dist, d_wt_sd_dist, 
            delta_bin_mean, delta_bin_sd, delta_bin_skew, delta_bin_mean_dist, delta_wt_mean_dist, delta_bin_sd_dist, delta_wt_sd_dist));

    print("PI and Tajima's D");

    print(pi(sfs_n_count));
    print(tajD(sfs_n_count));

    print(pi(sfs_d_count));
    print(tajD(sfs_d_count));


    //print(pi(c(14, 2, 2)));
    //print(tajD(c(14, 2, 2)));

*/

